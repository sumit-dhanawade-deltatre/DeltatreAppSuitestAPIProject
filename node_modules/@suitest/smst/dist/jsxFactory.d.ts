/// <reference path="../types/intrinsicElements.d.ts" />
import { Node } from '../types/unistTestLine';
declare type DeepArrayOrOne<T> = T | Array<T | DeepArrayOrOne<T>>;
export declare const flatten: <T extends unknown>(input: DeepArrayOrOne<T>) => T[];
export declare const assertUnknownSectionNode: (node: never) => never;
export declare const assertUnknownTextNode: (node: never) => never;
/**
 * A factory for JSX elements. Maps React-style JSX to unist-style nodes.
 * "any" is used for children and props because TypeScript can't infer JSX element types
 * anyway and always returns whatever is provided in JSX.Element type/interface.
 * Some validation is added to ensure correct data at least runtime.
 */
export declare function jsx<K extends keyof JSX.ElementsProps>(type: K, props: JSX.ElementsProps[K], ...children: Array<JSX.ElementsChildren[K]>): Node;
export {};
